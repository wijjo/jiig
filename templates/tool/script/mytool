#!/usr/bin/env jiig
"""
mytool (Jiig-based monolithic tool scrip).

Jiig automatically deals with adjusting Python package load path, manages any
required virtual environment, and scrapes tool metadata from simple
configuration variables.
"""

import jiig


@jiig.task
def calc(
    runtime: jiig.Runtime,
    blocks: jiig.f.text(repeat=(1, None)),
):
    """
    evaluate formula using Python interpreter

    :param runtime: jiig runtime api
    :param blocks: formula block(s) to evaluate
    """
    try:
        result = eval(' '.join(blocks))
        runtime.message(f'The result is {result}.')
    except Exception as exc:
        runtime.abort(f'Formula error: {exc}')


@jiig.task(
    cli={
        'options': {
            'upper': ('-u', '--upper'),
            'lower': ('-l', '--lower'),
        }
    }
)
def case(
    runtime: jiig.Runtime,
    upper: jiig.f.boolean(),
    lower: jiig.f.boolean(),
    blocks: jiig.f.text(repeat=(1, None)),
):
    """
    convert text case (default is "smart" conversion)

    :param runtime: jiig runtime api
    :param upper: convert to all-uppercase
    :param lower: convert to all-lowercase
    :param blocks: text block(s) to convert
    """
    if upper and lower:
        raise RuntimeError('Conflicting upper/lower options specified.')
    if not upper and not lower:
        # "Smart" conversion checks first character of first block.
        to_upper = blocks[0][:1].islower()
    else:
        to_upper = upper
    text = ' '.join(blocks)
    if to_upper:
        output_text = text.upper()
    else:
        output_text = text.lower()
    runtime.message(output_text)


@jiig.task
def words(
    runtime: jiig.Runtime,
    blocks: jiig.f.text(repeat=(1, None)),
):
    """
    count words using primitive whitespace splitting

    :param runtime: jiig runtime api
    :param blocks: text block(s) with words to count
    """
    count = len(' '.join(blocks).split())
    runtime.message(f'The word count is {count}.')


# noinspection PyUnusedLocal
@jiig.task(tasks=(case, words, calc))
def root(runtime: jiig.Runtime):
    """
    various text manipulations

    :param runtime: jiig runtime api
    """
    pass


TOOL_NAME = 'mytool'

DESCRIPTION = 'mytool description.'

ROOT_TASK = root

# PIP_PACKAGES = []
