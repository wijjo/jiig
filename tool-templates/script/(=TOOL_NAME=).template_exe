#!/usr/bin/env jiig-run

"""
${TOOL_NAME} (jiig monolithic tool script).
"""

DESCRIPTION = '${TOOL_NAME} description'

# The top jiig-run "shebang" runs this in a virtual environment with Pip
# dependencies installed (based on PIP_PACKAGES), if VENV_ROOT is specified. It
# also configures library load paths for access to tool and Jiig libraries,
# taking into account the LIB_FOLDERS setting. The mentioned settings may be
# managed in the jiig.init file.

from jiig import task, TaskRunner, utility


@task(
    'hello',
    help='display hello message',
    # See ArgumentParser.add_argument() keyword arguments.
    options={
        '-t': {'dest': 'TEXAS_STYLE', 'action': 'store_true', 'help': 'greet with a drawl'},
    },
    arguments=[
        {'dest': 'NAME', 'nargs': '?', 'help': 'optional name'}
    ],
)
def task_hello(runner: TaskRunner):
    greeting = 'Howdy' if runner.args.TEXAS_STYLE else 'Hello'
    if runner.args.NAME:
        greeting = f'{greeting} {runner.args.NAME}'
    utility.run(['date'], quiet=True)
    print(f'''{greeting}:

Sample task script: "${TOOL_NAME}"

The code in the above module demonstrates how to define a mapped task, with
options and arguments. Feel free to delete when you no longer need it.''')
